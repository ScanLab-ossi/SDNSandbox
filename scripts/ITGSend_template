#!/bin/bash

function run_ITGSend(){
  echo [$(date)] Running ITGSend!
  START_TIME=$(date +%s)
  CMD="timeout __timeout_secs__ ITGSend __tmp_file__ -l /dev/null"
  $CMD
  STATUS=$?
  RETRIES_LEFT=__max_retries__
  while [ $STATUS != 0 ]; do
    echo [$(date)] "ITGSend failed with status code $STATUS..."
    RETRIES_LEFT=$RETRIES_LEFT-1
    [ $RETRIES_LEFT == 0 ] && echo "No retries left!... Stopping send loop" && break
    ELAPSED_TIME=$(($(date +%s)-$START_TIME))
    [ __max_retries__ -lt $ELAPSED_TIME ] && echo "Too much time passed for this period! It's been $ELAPSED_TIME seconds... Stopping send loop" && break
    echo [$(date)] "Trying again in a second!"
    sleep 1
    $CMD
    STATUS=$?
  done
  echo [$(date)] "ITGSend finished with status code = $STATUS"
  return $STATUS
}

DESTINATIONS=($(seq 1 $((__host_id__ - 1)) ; seq $((__host_id__ + 1)) __num_hosts__))
echo Relavant destinations are: ${DESTINATIONS[@]}
PROTOCOL=__protocol__

for period in {1..__periods__}
do
  echo "Preparing period #$period..."
  cp __multiflow_path__/ITGSend_IMIX_multiflow_$PROTOCOL __tmp_file__
  # remove explanatory comments from file (ITGSend can't handle them)
  sed -i /^\#/d __tmp_file__
  # start from the next IP after the host and loop over destinations
  DEST_ITER=$(( ($period - 1 + __host_id__ - 1) % (__num_hosts__ - 1) ))
  DEST=${DESTINATIONS[$DEST_ITER]}
  sed -i s/destination/__hosts_template__$DEST/g __tmp_file__
  sed -i s/duration/__period_duration__/g __tmp_file__
  # 2pi is the regular wavelength of sine, so we divide it by the required wavelength
  PPS=$(awk "BEGIN{print __pps_base_level__+int(__pps_amplitude__*sin($period*2*atan2(0,-1)/__pps_wavelength__))}")
  # The IMIX split shown was ~30% 40B, ~55% normal around 576B, ~15% 1500B
  # The 190 standard deviation makes 3-sigma between 50-1400 packet sizes be 99,7%
  # All values based roughly on http://www.caida.org/research/traffic-analysis/AIX/plen_hist/
  if [ $PROTOCOL == 'UDP' ]; then
    # Therefore to get a similar distribution with UDP:
    # Constant packet size - low 30%
    sed -i s/pps_low/"$(awk "BEGIN{print int(0.3 * $PPS)}")"/g __tmp_file__
    # Normal Distribution for packet sizes - 55%
    sed -i s/pps_normal/"$(awk "BEGIN{print int(0.55 * $PPS)}")"/g __tmp_file__
    # Constant packet size - high - 15%
    sed -i s/pps_high/"$(awk "BEGIN{print int(0.15 * $PPS)}")"/g __tmp_file__
  else
    # Therefore to get a similar distribution with TCP (which has builtin 40B ACKs):
    # Normal distribution with [100 - (100 * 15 / (15 + 55))] = 78%
    sed -i s/pps_normal/"$(awk "BEGIN{print int(0.78 * $PPS)}")"/g __tmp_file__
    # Constant packet size - high - 22%
    sed -i s/pps_high/"$(awk "BEGIN{print int(0.22 * $PPS)}")"/g __tmp_file__
  fi

  echo "Running period #$period..."
  echo "Using following multiflow commands:"; cat __tmp_file__
  run_ITGSend
done
